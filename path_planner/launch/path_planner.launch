<launch>
    <!--Path planner parameters-->
    <arg name="planner"              default="1"/> <!-- 0: RRT*  1: B-RRT*  2: IB-RRT* 3: Parallel IB-RRT*-->
    <!-- For RRT*-->
    <arg name="step"                 default="0.2"/>            <!-- Step size to expand in the direction of random sample-->
    <arg name="search_radius"        default=" 1.75"/>  <!-- Search radius for neighbor vertices in tree graph-->
    <arg name="radius"               default="0.05"/>          <!-- Assuming a sphere bounding volume for a robot -->
    <arg name="threshold"            default="0.2"/>       <!-- Bias used to pull the random tree exploration to the goal-->
    <arg name="eps"                  default="0.1"/>             <!-- Stop condition, in  meters. Error between a node and the goal. -->
    <arg name="x_min"                default="-5.0"/>          <!-- Map x min boundary -->
    <arg name="x_max"                default="5.0"/>           <!-- Map x max boundary-->
    <arg name="y_min"                default="-5.0"/>          <!-- Map y min boundary-->
    <arg name="y_max"                default="5.0"/>           <!-- Map y max boundary-->
    <arg name="z_min"                default="-0.05"/>          <!-- Map z min boundary-->
    <arg name="z_max"                default="2.10"/>           <!-- Map z max boundary-->
    <!-- For B-RRT* & IB-RRT*-->
    <arg name="iterations"           default="30000"/>  <!-- Max number of iterations for bidirectional RRT-->
    <!-- For Parallel IB-RRT*-->
    <arg name="workers"              default="10"/>
    <!-- UFO Map server parameters, please consult https://github.com/UnknownFreeOccupied/ufomap/wiki/    for details. -->
    <arg name="resolution"          default="0.05"/> <!-- Map resolution for UfoMap Server -->
    <arg name="depth_levels"        default="16"/> <!-- Depth of Octomap -->
    <arg name="num_workers"         default="3"/> <!-- Workers for UfoMap threads -->
    <arg name="color"               default="true"/> <!-- Ufo Mao color map enabled -->
    <arg name="model"               default="studio_d435i_t265_3.ply"/> <!-- .ply model name to load point cloud from.-->
    <arg name="path"                default="$(find pointcloud_publisher)/models/$(arg model)"/> <!-- Relative path where .ply model is stored -->
    <arg name="topic"               default="/camera/depth/points"/> <!-- Topic to publish the point cloud to.-->
    <arg name="frame_id"            default="t265_d400_base"/> <!-- frame of reference of the point cloud. -->
    <arg name="publish_rate"        default="1.0"/> <!-- Topic rate of publishing. -->

    <!-- Point cloud publisher  <include file="$(find pointcloud_publisher)/launch/publish_pointcloud.launch"/> -->

    <!--UfoMap server node -->
    <node pkg="ufomap_mapping" type="ufomap_mapping_server_node" name="ufomap_mapping_server_node" output="log"
          required="true">
        <remap from="cloud_in"      to="/camera/depth/points"/>
        <param name="num_workers"   value="$(arg num_workers)"/>
        <param name="resolution"    value="$(arg resolution)"/>
        <param name="depth_levels"  value="$(arg depth_levels)"/>
        <param name="color_map"     value="$(arg color)"/>
    </node>
    <!-- Point Cloud Publisher node-->
    <node pkg="pointcloud_publisher" type="cloud_publisher" name="cloud_publisher" output="screen">
        <param name="path"          value="$(arg path)"/>
        <param name="topic"         value="$(arg topic)"/>
        <param name="frame_id"      value="$(arg frame_id)"/>
        <param name="publish_rate"  value="$(arg publish_rate)"/>
    </node>
    <!-- Transform needed to align point cloud to world frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_to_pointcloud"
          args="1.061 1.364 1.338 -1.571 -0.031 0.017 map t265_d400_base 100"/>
    <!-- Rviz configuration for visualization. -->
    <node type="rviz" name="rviz" pkg="rviz"
          args="-d $(find pointcloud_publisher)/rviz/pointcloud_publisher_rviz.rviz"/>
    <!-- Path planner node -->
    <node pkg="path_planner" type="path_planner_node" name="path_planner_node" output="screen" respawn="true">
        <param name="planner"        value="$(arg planner)"/>
        <param name="iterations"     value="$(arg iterations)"/>
        <param name="step"           value="$(arg step)"/>
        <param name="search_radius"  value="$(arg search_radius)"/>
        <param name="radius"         value="$(arg radius)"/>
        <param name="threshold"      value="$(arg threshold)"/>
        <param name="eps"            value="$(arg eps)"/>
        <param name="x_min"          value="$(arg x_min)"/>
        <param name="x_max"          value="$(arg x_max)"/>
        <param name="y_min"          value="$(arg y_min)"/>
        <param name="y_max"          value="$(arg y_max)"/>
        <param name="z_min"          value="$(arg z_min)"/>
        <param name="z_max"          value="$(arg z_max)"/>
        <param name="workers"        value="$(arg workers"/>
    </node>
</launch>